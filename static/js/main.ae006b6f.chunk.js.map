{"version":3,"sources":["MyMap.js","App.js","serviceWorker.js","index.js"],"names":["MyMap","props","className","Map","center","position","zoom","TileLayer","url","attribution","App","state","IP","city","region","country","lat","lng","fetch","then","response","json","result","setState","ip","location","result2","img","flag","timezone","timezones","countryname","name","capital","population","catch","error","console","log","message","onClick","getIP","this","src","alt","React","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0SAmBiBA,MAhBjB,SAAgBC,GACd,OACI,yBAAKC,UAAU,iBACb,yBAAKA,UAAU,qBACb,kBAACC,EAAA,EAAD,CAAKC,OAAQH,EAAMI,SAAUC,KAAML,EAAMK,MACvC,kBAACC,EAAA,EAAD,CACEC,IAAI,qDACJC,YAAY,+EC4BXC,E,kDAjCb,WAAYT,GAAQ,IAAD,8BACjB,cAAMA,IAECU,MAAQ,CAACC,GAAI,GAAIC,KAAM,GAAIC,OAAQ,GAAIC,QAAS,GAAIC,IAAI,GAAIC,IAAK,IAHvD,E,oDAMZ,IAAD,OACNC,MAAM,wEACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAM,OAAI,EAAKC,SAAS,CAACX,GAAIU,EAAOE,GAAIT,QAASO,EAAOG,SAASV,QAASF,KAAMS,EAAOG,SAASZ,KAAMC,OAAQQ,EAAOG,SAASX,OAAQE,IAAKM,EAAOG,SAAST,IAAKC,IAAKK,EAAOG,SAASR,SAC1LE,MAAM,kBAAOD,MAAM,0CAAD,OAA2C,EAAKP,MAAMI,UAClEI,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UAC3BF,MAAK,SAAAO,GAAO,OAAI,EAAKH,SAAS,CAACI,IAAKD,EAAQE,KAAMC,SAAUH,EAAQI,UAAU,GAAIC,YAAaL,EAAQM,KAAMC,QAASP,EAAQO,QAASC,WAAYR,EAAQQ,gBAC3JC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,QAASF,EAAMG,eAChDJ,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,QAASF,EAAMG,c,+BAKnC,IAAD,OACP,OACE,yBAAKrC,UAAU,OACf,4BAAQA,UAAU,SAASsC,QAAS,kBAAK,EAAKC,UAA9C,UACA,yBAAKvC,UAAU,MAAMwC,KAAK/B,MAAMC,GAAK,wCAAc8B,KAAK/B,MAAMC,IAAU,IACxE,yBAAKV,UAAU,YAAYwC,KAAK/B,MAAME,KAAO,0CAAe,6BAAf,yBAA2C6B,KAAK/B,MAAME,KAAtD,KAA8D6B,KAAK/B,MAAMG,OAAzE,KAAmF4B,KAAK/B,MAAMI,SAAe,IAC1J,yBAAKb,UAAU,eAAewC,KAAK/B,MAAMgB,IAAM,yBAAKgB,IAAKD,KAAK/B,MAAMgB,IAAKiB,IAAI,KAAO,IACpF,yBAAK1C,UAAU,WAAWwC,KAAK/B,MAAMoB,YAAc,2BAAIW,KAAK/B,MAAMoB,YAAf,iBAA0CW,KAAK/B,MAAMsB,QAArD,uBAAkFS,KAAK/B,MAAMuB,WAA7F,KAA+G,IAClK,kBAAC,EAAD,CAAO7B,SAAU,CAACqC,KAAK/B,MAAMK,IAAK0B,KAAK/B,MAAMM,KAAMX,KAAM,U,GA5B7CuC,IAAMC,WCQJC,QACW,cAA7BC,OAAOvB,SAASwB,UAEe,UAA7BD,OAAOvB,SAASwB,UAEhBD,OAAOvB,SAASwB,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvC,MAAK,SAAAwC,GACJA,EAAaC,gBAEdzB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMG,c","file":"static/js/main.ae006b6f.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Map, TileLayer } from 'react-leaflet'\r\n\r\nfunction MyMap (props) {\r\n  return(\r\n      <div className=\"map-container\"> \r\n        <div className=\"leaflet-container\"> \r\n          <Map center={props.position} zoom={props.zoom}>\r\n            <TileLayer\r\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n              attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\r\n            />\r\n          </Map>\r\n        </div>\r\n      </div>\r\n        )\r\n  }\r\n\r\n\r\n  export default MyMap","import React from 'react';\nimport './App.css';\nimport MyMap from \"./MyMap\"\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n      // this.state = {IP: \"95.90.254.10\", city: \"Lambrechtshagen\", region: \"Mecklenburg-Vorpommern\", country: \"DE\", lat:\"54.1021\", lng: \"12.0164\" };\n      this.state = {IP: \"\", city: \"\", region: \"\", country: \"\", lat:\"\", lng: \"\" };\n  }\n\ngetIP() { \n  fetch(\"https://geo.ipify.org/api/v1?apiKey=at_RZgqfIVVenVQTzIL1IkcW5RmkBkhu\")\n    .then(response => response.json())\n    .then(result => this.setState({IP: result.ip, country: result.location.country, city: result.location.city, region: result.location.region, lat: result.location.lat, lng: result.location.lng}))\n    .then( () =>  fetch(`https://restcountries.eu/rest/v2/alpha/${this.state.country}`)\n          .then( response => response.json())\n          .then(result2 => this.setState({img: result2.flag, timezone: result2.timezones[0], countryname: result2.name, capital: result2.capital, population: result2.population}))\n          .catch(error => console.log('error', error.message)))\n    .catch(error => console.log('error', error.message)) \n}\n \n\n\n  render (){\n    return (\n      <div className=\"App\">\n      <button className=\"button\" onClick={() =>this.getIP()}>get IP</button>\n      <div className=\"ip\">{this.state.IP ? <p>My IP is: {this.state.IP}</p> : \"\"}</div>\n      <div className=\"location\">{this.state.city ? <p>My Location:<br/>Your are currently in {this.state.city}, {this.state.region}, {this.state.country}</p> : \"\"}</div>\n      <div className=\"countryflag\">{this.state.img ? <img src={this.state.img} alt=\"\" /> :\"\"}</div>\n      <div className=\"country\">{this.state.countryname ? <p>{this.state.countryname}`s capital is {this.state.capital}, the population is {this.state.population}.</p> :\"\" }</div>\n      <MyMap position={[this.state.lat, this.state.lng]} zoom={10}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}